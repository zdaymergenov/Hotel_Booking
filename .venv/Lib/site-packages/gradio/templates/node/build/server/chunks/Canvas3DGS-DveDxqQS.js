import { c as create_ssr_component, d as add_attribute } from './ssr-C3HYbsxA.js';

class h{constructor(t=0,e=0,A=0){this.x=t,this.y=e,this.z=A;}equals(t){return !(this.x!==t.x||this.y!==t.y||this.z!==t.z)}add(t){return typeof t=="number"?new h(this.x+t,this.y+t,this.z+t):new h(this.x+t.x,this.y+t.y,this.z+t.z)}subtract(t){return typeof t=="number"?new h(this.x-t,this.y-t,this.z-t):new h(this.x-t.x,this.y-t.y,this.z-t.z)}multiply(t){return typeof t=="number"?new h(this.x*t,this.y*t,this.z*t):t instanceof h?new h(this.x*t.x,this.y*t.y,this.z*t.z):new h(this.x*t.buffer[0]+this.y*t.buffer[4]+this.z*t.buffer[8]+t.buffer[12],this.x*t.buffer[1]+this.y*t.buffer[5]+this.z*t.buffer[9]+t.buffer[13],this.x*t.buffer[2]+this.y*t.buffer[6]+this.z*t.buffer[10]+t.buffer[14])}divide(t){return typeof t=="number"?new h(this.x/t,this.y/t,this.z/t):new h(this.x/t.x,this.y/t.y,this.z/t.z)}cross(t){const e=this.y*t.z-this.z*t.y,A=this.z*t.x-this.x*t.z,Q=this.x*t.y-this.y*t.x;return new h(e,A,Q)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lerp(t,e){return new h(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e,this.z+(t.z-this.z)*e)}min(t){return new h(Math.min(this.x,t.x),Math.min(this.y,t.y),Math.min(this.z,t.z))}max(t){return new h(Math.max(this.x,t.x),Math.max(this.y,t.y),Math.max(this.z,t.z))}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(`Invalid component index: ${t}`)}}minComponent(){return this.x<this.y&&this.x<this.z?0:this.y<this.z?1:2}maxComponent(){return this.x>this.y&&this.x>this.z?0:this.y>this.z?1:2}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(t){return Math.sqrt((this.x-t.x)**2+(this.y-t.y)**2+(this.z-t.z)**2)}normalize(){const t=this.magnitude();return new h(this.x/t,this.y/t,this.z/t)}flat(){return [this.x,this.y,this.z]}clone(){return new h(this.x,this.y,this.z)}toString(){return `[${this.flat().join(", ")}]`}static One(t=1){return new h(t,t,t)}}class k{constructor(t=0,e=0,A=0,Q=1){this.x=t,this.y=e,this.z=A,this.w=Q;}equals(t){return !(this.x!==t.x||this.y!==t.y||this.z!==t.z||this.w!==t.w)}normalize(){const t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new k(this.x/t,this.y/t,this.z/t,this.w/t)}multiply(t){const e=this.w,A=this.x,Q=this.y,s=this.z,n=t.w,U=t.x,F=t.y,i=t.z;return new k(e*U+A*n+Q*i-s*F,e*F-A*i+Q*n+s*U,e*i+A*F-Q*U+s*n,e*n-A*U-Q*F-s*i)}inverse(){const t=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new k(-this.x/t,-this.y/t,-this.z/t,this.w/t)}apply(t){const e=new k(t.x,t.y,t.z,0),A=new k(-this.x,-this.y,-this.z,this.w),Q=this.multiply(e).multiply(A);return new h(Q.x,Q.y,Q.z)}flat(){return [this.x,this.y,this.z,this.w]}clone(){return new k(this.x,this.y,this.z,this.w)}static FromEuler(t){const e=t.x/2,A=t.y/2,Q=t.z/2,s=Math.cos(A),n=Math.sin(A),U=Math.cos(e),F=Math.sin(e),i=Math.cos(Q),d=Math.sin(Q);return new k(s*F*i+n*U*d,n*U*i-s*F*d,s*U*d-n*F*i,s*U*i+n*F*d)}toEuler(){const t=2*(this.w*this.x+this.y*this.z),e=1-2*(this.x*this.x+this.y*this.y),A=Math.atan2(t,e);let Q;const s=2*(this.w*this.y-this.z*this.x);Math.abs(s)>=1?Q=Math.sign(s)*Math.PI/2:Q=Math.asin(s);const n=2*(this.w*this.z+this.x*this.y),U=1-2*(this.y*this.y+this.z*this.z),F=Math.atan2(n,U);return new h(A,Q,F)}static FromMatrix3(t){const e=t.buffer,A=e[0]+e[4]+e[8];let Q,s,n,U;if(A>0){const F=.5/Math.sqrt(A+1);U=.25/F,Q=(e[7]-e[5])*F,s=(e[2]-e[6])*F,n=(e[3]-e[1])*F;}else if(e[0]>e[4]&&e[0]>e[8]){const F=2*Math.sqrt(1+e[0]-e[4]-e[8]);U=(e[7]-e[5])/F,Q=.25*F,s=(e[1]+e[3])/F,n=(e[2]+e[6])/F;}else if(e[4]>e[8]){const F=2*Math.sqrt(1+e[4]-e[0]-e[8]);U=(e[2]-e[6])/F,Q=(e[1]+e[3])/F,s=.25*F,n=(e[5]+e[7])/F;}else {const F=2*Math.sqrt(1+e[8]-e[0]-e[4]);U=(e[3]-e[1])/F,Q=(e[2]+e[6])/F,s=(e[5]+e[7])/F,n=.25*F;}return new k(Q,s,n,U)}static FromAxisAngle(t,e){const A=e/2,Q=Math.sin(A),s=Math.cos(A);return new k(t.x*Q,t.y*Q,t.z*Q,s)}static LookRotation(t){const e=new h(0,0,1),A=e.dot(t);if(Math.abs(A- -1)<1e-6)return new k(0,1,0,Math.PI);if(Math.abs(A-1)<1e-6)return new k;const Q=Math.acos(A),s=e.cross(t).normalize();return k.FromAxisAngle(s,Q)}toString(){return `[${this.flat().join(", ")}]`}}class tt{static{this.SH_C0=.28209479177387814;}static SplatToPLY(t,e){let A=`ply
format binary_little_endian 1.0
`;A+=`element vertex ${e}
`;const Q=["x","y","z","nx","ny","nz","f_dc_0","f_dc_1","f_dc_2"];for(let g=0;g<45;g++)Q.push(`f_rest_${g}`);Q.push("opacity"),Q.push("scale_0"),Q.push("scale_1"),Q.push("scale_2"),Q.push("rot_0"),Q.push("rot_1"),Q.push("rot_2"),Q.push("rot_3");for(const g of Q)A+=`property float ${g}
`;A+=`end_header
`;const s=new TextEncoder().encode(A),n=4*3+4*3+4*3+4*45+4+4*3+4*4,U=e*n,F=new DataView(new ArrayBuffer(s.length+U));new Uint8Array(F.buffer).set(s,0);const i=new Float32Array(t),d=new Uint8Array(t),C=s.length,B=4*3+4*3,r=B+4*3+4*45,I=r+4,l=I+4*3;for(let g=0;g<e;g++){const R=i[8*g+0],c=i[8*g+1],u=i[8*g+2],f=(d[32*g+24+0]/255-.5)/this.SH_C0,D=(d[32*g+24+1]/255-.5)/this.SH_C0,y=(d[32*g+24+2]/255-.5)/this.SH_C0,N=d[32*g+24+3]/255,w=Math.log(N/(1-N)),V=Math.log(i[8*g+3+0]),H=Math.log(i[8*g+3+1]),M=Math.log(i[8*g+3+2]);let x=new k((d[32*g+28+1]-128)/128,(d[32*g+28+2]-128)/128,(d[32*g+28+3]-128)/128,(d[32*g+28+0]-128)/128);x=x.normalize();const Z=x.w,p=x.x,P=x.y,T=x.z;F.setFloat32(C+n*g+0,R,!0),F.setFloat32(C+n*g+4,c,!0),F.setFloat32(C+n*g+8,u,!0),F.setFloat32(C+n*g+B+0,f,!0),F.setFloat32(C+n*g+B+4,D,!0),F.setFloat32(C+n*g+B+8,y,!0),F.setFloat32(C+n*g+r,w,!0),F.setFloat32(C+n*g+I+0,V,!0),F.setFloat32(C+n*g+I+4,H,!0),F.setFloat32(C+n*g+I+8,M,!0),F.setFloat32(C+n*g+l+0,Z,!0),F.setFloat32(C+n*g+l+4,p,!0),F.setFloat32(C+n*g+l+8,P,!0),F.setFloat32(C+n*g+l+12,T,!0);}return F.buffer}}const Bt="",Vt=E=>Uint8Array.from(atob(E),t=>t.charCodeAt(0));typeof self<"u"&&self.Blob&&new Blob(["URL.revokeObjectURL(import.meta.url);",Vt(Bt)],{type:"text/javascript;charset=utf-8"});const ot="",Nt=E=>Uint8Array.from(atob(E),t=>t.charCodeAt(0));typeof self<"u"&&self.Blob&&new Blob(["URL.revokeObjectURL(import.meta.url);",Nt(ot)],{type:"text/javascript;charset=utf-8"});const xt=create_ssr_component((E,t,e,A)=>{let {value:s}=t,{zoom_speed:n}=t,{pan_speed:U}=t,F;return t.value===void 0&&e.value&&s!==void 0&&e.value(s),t.zoom_speed===void 0&&e.zoom_speed&&n!==void 0&&e.zoom_speed(n),t.pan_speed===void 0&&e.pan_speed&&U!==void 0&&e.pan_speed(U),s.url,`<canvas${add_attribute("this",F,0)}></canvas>`});

export { xt as default };
//# sourceMappingURL=Canvas3DGS-DveDxqQS.js.map
