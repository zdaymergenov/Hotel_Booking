import{s as re}from"./chunk-NRVI72HA-CnLugOjc.js";import{_ as h,E as j,F as q,I as ne,d as oe,l as B,a9 as L,b as ie,a as ce,p as pe,q as de,g as he,s as me,G as ue,aa as fe,y as ye}from"./mermaid.core-DAlYk5o6.js";import{p as ge}from"./chunk-ANTBXLJU-oG1WScdo.js";import{p as Se}from"./mermaid-parser.core-CaMzgT_d.js";import{f as P}from"./defaultLocale-CNpUPyHh.js";import{o as R}from"./ordinal-BeghXfj9.js";import{h as xe,t as be}from"./index-Bi7T_FA4.js";import{s as W}from"./select-BigU4G0v.js";import"./index-sqki5BVz.js";import"./svelte/svelte.js";import"./init-CYs0NWnS.js";import"./step-Wxge9qY-.js";import"./dispatch-kxCwF96_.js";import"./_baseUniq-ph6aaJuK.js";import"./_basePickBy-BujBkamd.js";import"./clone-BkmIQ5N_.js";import"./init-Dmth1JHB.js";var U=class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=ie,this.getAccTitle=ce,this.setDiagramTitle=pe,this.getDiagramTitle=de,this.getAccDescription=he,this.setAccDescription=me}static{h(this,"TreeMapDB")}getNodes(){return this.nodes}getConfig(){const s=ue,a=q();return j({...s.treemap,...a.treemap??{}})}addNode(s,a){this.nodes.push(s),this.levels.set(s,a),a===0&&(this.outerNodes.push(s),this.root??=s)}getRoot(){return{name:"",children:this.outerNodes}}addClass(s,a){const o=this.classes.get(s)??{id:s,styles:[],textStyles:[]},i=a.replace(/\\,/g,"§§§").replace(/,/g,";").replace(/§§§/g,",").split(";");i&&i.forEach(p=>{fe(p)&&(o?.textStyles?o.textStyles.push(p):o.textStyles=[p]),o?.styles?o.styles.push(p):o.styles=[p]}),this.classes.set(s,o)}getClasses(){return this.classes}getStylesForClass(s){return this.classes.get(s)?.styles??[]}clear(){ye(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}};function J(s){if(!s.length)return[];const a=[],o=[];return s.forEach(i=>{const p={name:i.name,children:i.type==="Leaf"?void 0:[]};for(p.classSelector=i?.classSelector,i?.cssCompiledStyles&&(p.cssCompiledStyles=[i.cssCompiledStyles]),i.type==="Leaf"&&i.value!==void 0&&(p.value=i.value);o.length>0&&o[o.length-1].level>=i.level;)o.pop();if(o.length===0)a.push(p);else{const n=o[o.length-1].node;n.children?n.children.push(p):n.children=[p]}i.type!=="Leaf"&&o.push({node:p,level:i.level})}),a}h(J,"buildHierarchy");var ve=h((s,a)=>{ge(s,a);const o=[];for(const n of s.TreemapRows??[])n.$type==="ClassDefStatement"&&a.addClass(n.className??"",n.styleText??"");for(const n of s.TreemapRows??[]){const d=n.item;if(!d)continue;const f=n.indent?parseInt(n.indent):0,M=Ce(d),l=d.classSelector?a.getStylesForClass(d.classSelector):[],F=l.length>0?l.join(";"):void 0,b={level:f,name:M,type:d.$type,value:d.value,classSelector:d.classSelector,cssCompiledStyles:F};o.push(b)}const i=J(o),p=h((n,d)=>{for(const f of n)a.addNode(f,d),f.children&&f.children.length>0&&p(f.children,d+1)},"addNodesRecursively");p(i,0)},"populate"),Ce=h(s=>s.name?String(s.name):"","getItemName"),K={parser:{yy:void 0},parse:h(async s=>{try{const o=await Se("treemap",s);B.debug("Treemap AST:",o);const i=K.parser?.yy;if(!(i instanceof U))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");ve(o,i)}catch(a){throw B.error("Error parsing treemap:",a),a}},"parse")},we=10,$=10,D=25,Te=h((s,a,o,i)=>{const p=i.db,n=p.getConfig(),d=n.padding??we,f=p.getDiagramTitle(),M=p.getRoot(),{themeVariables:l}=q();if(!M)return;const F=f?30:0,b=ne(a),I=n.nodeWidth?n.nodeWidth*$:960,G=n.nodeHeight?n.nodeHeight*$:500,_=I,O=G+F;b.attr("viewBox",`0 0 ${_} ${O}`),oe(b,O,_,n.useMaxWidth);let v;try{const e=n.valueFormat||",";if(e==="$0,0")v=h(t=>"$"+P(",")(t),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){const t=/\.\d+/.exec(e),r=t?t[0]:"";v=h(m=>"$"+P(","+r)(m),"valueFormat")}else if(e.startsWith("$")){const t=e.substring(1);v=h(r=>"$"+P(t||"")(r),"valueFormat")}else v=P(e)}catch(e){B.error("Error creating format function:",e),v=P(",")}const z=R().range(["transparent",l.cScale0,l.cScale1,l.cScale2,l.cScale3,l.cScale4,l.cScale5,l.cScale6,l.cScale7,l.cScale8,l.cScale9,l.cScale10,l.cScale11]),Q=R().range(["transparent",l.cScalePeer0,l.cScalePeer1,l.cScalePeer2,l.cScalePeer3,l.cScalePeer4,l.cScalePeer5,l.cScalePeer6,l.cScalePeer7,l.cScalePeer8,l.cScalePeer9,l.cScalePeer10,l.cScalePeer11]),V=R().range([l.cScaleLabel0,l.cScaleLabel1,l.cScaleLabel2,l.cScaleLabel3,l.cScaleLabel4,l.cScaleLabel5,l.cScaleLabel6,l.cScaleLabel7,l.cScaleLabel8,l.cScaleLabel9,l.cScaleLabel10,l.cScaleLabel11]);f&&b.append("text").attr("x",_/2).attr("y",F/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(f);const X=b.append("g").attr("transform",`translate(0, ${F})`).attr("class","treemapContainer"),Z=xe(M).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),Y=be().size([I,G]).paddingTop(e=>e.children&&e.children.length>0?D+$:0).paddingInner(d).paddingLeft(e=>e.children&&e.children.length>0?$:0).paddingRight(e=>e.children&&e.children.length>0?$:0).paddingBottom(e=>e.children&&e.children.length>0?$:0).round(!0)(Z),ee=Y.descendants().filter(e=>e.children&&e.children.length>0),N=X.selectAll(".treemapSection").data(ee).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);N.append("rect").attr("width",e=>e.x1-e.x0).attr("height",D).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>e.depth===0?"display: none;":""),N.append("clipPath").attr("id",(e,t)=>`clip-section-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",D),N.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>z(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>Q(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(e.depth===0)return"display: none;";const t=L({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),N.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",D/2).attr("dominant-baseline","middle").text(e=>e.depth===0?"":e.data.name).attr("font-weight","bold").attr("style",e=>{if(e.depth===0)return"display: none;";const t="dominant-baseline: middle; font-size: 12px; fill:"+V(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",r=L({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")}).each(function(e){if(e.depth===0)return;const t=W(this),r=e.data.name;t.text(r);const m=e.x1-e.x0,g=6;let S;n.showValues!==!1&&e.value?S=m-10-30-10-g:S=m-g-6;const x=Math.max(15,S),c=t.node();if(c.getComputedTextLength()>x){const u="...";let y=r;for(;y.length>0;){if(y=r.substring(0,y.length-1),y.length===0){t.text(u),c.getComputedTextLength()>x&&t.text("");break}if(t.text(y+u),c.getComputedTextLength()<=x)break}}}),n.showValues!==!1&&N.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",D/2).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?v(e.value):"").attr("font-style","italic").attr("style",e=>{if(e.depth===0)return"display: none;";const t="text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+V(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",r=L({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")});const te=Y.leaves(),E=X.selectAll(".treemapLeafGroup").data(te).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);E.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>e.parent?z(e.parent.data.name):z(e.data.name)).attr("style",e=>L({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>e.parent?z(e.parent.data.name):z(e.data.name)).attr("stroke-width",3),E.append("clipPath").attr("id",(e,t)=>`clip-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),E.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>{const t="text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+V(e.data.name)+";",r=L({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")}).attr("clip-path",(e,t)=>`url(#clip-${a}-${t})`).text(e=>e.data.name).each(function(e){const t=W(this),r=e.x1-e.x0,m=e.y1-e.y0,g=t.node(),S=4,T=r-2*S,x=m-2*S;if(T<10||x<10){t.style("display","none");return}let c=parseInt(t.style("font-size"),10);const C=8,u=28,y=.6,w=6,A=2;for(;g.getComputedTextLength()>T&&c>C;)c--,t.style("font-size",`${c}px`);let k=Math.max(w,Math.min(u,Math.round(c*y))),H=c+A+k;for(;H>x&&c>C&&(c--,k=Math.max(w,Math.min(u,Math.round(c*y))),!(k<w&&c===C));)t.style("font-size",`${c}px`),H=c+A+k;t.style("font-size",`${c}px`),(g.getComputedTextLength()>T||c<C||x<c)&&t.style("display","none")}),n.showValues!==!1&&E.append("text").attr("class","treemapValue").attr("x",t=>(t.x1-t.x0)/2).attr("y",function(t){return(t.y1-t.y0)/2}).attr("style",t=>{const r="text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+V(t.data.name)+";",m=L({cssCompiledStyles:t.data.cssCompiledStyles});return r+m.labelStyles.replace("color:","fill:")}).attr("clip-path",(t,r)=>`url(#clip-${a}-${r})`).text(t=>t.value?v(t.value):"").each(function(t){const r=W(this),m=this.parentNode;if(!m){r.style("display","none");return}const g=W(m).select(".treemapLabel");if(g.empty()||g.style("display")==="none"){r.style("display","none");return}const S=parseFloat(g.style("font-size")),T=28,x=.6,c=6,C=2,u=Math.max(c,Math.min(T,Math.round(S*x)));r.style("font-size",`${u}px`);const w=(t.y1-t.y0)/2+S/2+C;r.attr("y",w);const A=t.x1-t.x0,le=t.y1-t.y0-4,se=A-2*4;r.node().getComputedTextLength()>se||w+u>le||u<c?r.style("display","none"):r.style("display",null)});const ae=n.diagramPadding??8;re(b,ae,"flowchart",n?.useMaxWidth||!1)},"draw"),Le=h(function(s,a){return a.db.getClasses()},"getClasses"),$e={draw:Te,getClasses:Le},Fe={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},ze=h(({treemap:s}={})=>{const a=j(Fe,s);return`
  .treemapNode.section {
    stroke: ${a.sectionStrokeColor};
    stroke-width: ${a.sectionStrokeWidth};
    fill: ${a.sectionFillColor};
  }
  .treemapNode.leaf {
    stroke: ${a.leafStrokeColor};
    stroke-width: ${a.leafStrokeWidth};
    fill: ${a.leafFillColor};
  }
  .treemapLabel {
    fill: ${a.labelColor};
    font-size: ${a.labelFontSize};
  }
  .treemapValue {
    fill: ${a.valueColor};
    font-size: ${a.valueFontSize};
  }
  .treemapTitle {
    fill: ${a.titleColor};
    font-size: ${a.titleFontSize};
  }
  `},"getStyles"),Ne=ze,Ue={parser:K,get db(){return new U},renderer:$e,styles:Ne};export{Ue as diagram};
//# sourceMappingURL=diagram-4IRLE6MV-Dn61g7XS.js.map
