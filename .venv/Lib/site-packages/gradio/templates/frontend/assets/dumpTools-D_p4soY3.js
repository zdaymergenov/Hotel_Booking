const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./index-Bw-AQDKF.js","./index-sqki5BVz.js","./index-CQcVwX71.css","./pass.fragment-SbW2kbJy.js"])))=>i.map(i=>d[i]);
import{_}from"./index-sqki5BVz.js";import{aj as I,b as m,ak as u,al as b,am as P}from"./index-Bw-AQDKF.js";import"./svelte/svelte.js";let l,d=null;async function S(){return d||(d=new Promise((t,s)=>{let n,e=null;const o={preserveDrawingBuffer:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};_(async()=>{const{ThinEngine:i}=await import("./index-Bw-AQDKF.js").then(p=>p.bX);return{ThinEngine:i}},__vite__mapDeps([0,1,2]),import.meta.url).then(({ThinEngine:i})=>{const p=u.Instances.length;try{n=new OffscreenCanvas(100,100),e=new i(n,!1,o)}catch{p<u.Instances.length&&u.Instances.pop()?.dispose(),n=document.createElement("canvas"),e=new i(n,!1,o)}u.Instances.pop(),u.OnEnginesDisposedObservable.add(a=>{e&&a!==e&&!e.isDisposed&&u.Instances.length===0&&y()}),e.getCaps().parallelShaderCompile=void 0;const f=new b(e);_(async()=>{const{passPixelShader:a}=await import("./pass.fragment-SbW2kbJy.js");return{passPixelShader:a}},__vite__mapDeps([3,0,1,2]),import.meta.url).then(({passPixelShader:a})=>{if(!e){s("Engine is not defined");return}const r=new P({engine:e,name:a.name,fragmentShader:a.shader,samplerNames:["textureSampler"]});l={canvas:n,engine:e,renderer:f,wrapper:r},t(l)})}).catch(s)})),await d}async function E(t,s,n,e,o="image/png",i,p){const f=await n.readPixels(0,0,t,s),a=new Uint8Array(f.buffer);w(t,s,a,e,o,i,!0,void 0,p)}function v(t,s,n,e="image/png",o,i=!1,p=!1,f){return new Promise(a=>{w(t,s,n,r=>a(r),e,o,i,p,f)})}function w(t,s,n,e,o="image/png",i,p=!1,f=!1,a){S().then(r=>{if(r.engine.setSize(t,s,!0),n instanceof Float32Array){const g=new Uint8Array(n.length);let c=n.length;for(;c--;){const D=n[c];g[c]=Math.round(I(D)*255)}n=g}const h=r.engine.createRawTexture(n,t,s,5,!1,!p,1);r.renderer.setViewport(),r.renderer.applyEffectWrapper(r.wrapper),r.wrapper.effect._bindTexture("textureSampler",h),r.renderer.draw(),f?m.ToBlob(r.canvas,g=>{const c=new FileReader;c.onload=D=>{const A=D.target.result;e&&e(A)},c.readAsArrayBuffer(g)},o,a):m.EncodeScreenshotCanvasData(r.canvas,e,o,i,a),h.dispose()})}function y(){l?(l.wrapper.dispose(),l.renderer.dispose(),l.engine.dispose()):d?.then(t=>{t.wrapper.dispose(),t.renderer.dispose(),t.engine.dispose()}),d=null,l=null}const O={DumpData:w,DumpDataAsync:v,DumpFramebuffer:E,Dispose:y},T=()=>{m.DumpData=w,m.DumpDataAsync=v,m.DumpFramebuffer=E};T();export{y as Dispose,w as DumpData,v as DumpDataAsync,E as DumpFramebuffer,O as DumpTools};
//# sourceMappingURL=dumpTools-D_p4soY3.js.map
